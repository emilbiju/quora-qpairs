# -*- coding: utf-8 -*-
"""EE5180Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19I52qxyhoha0dCx0d101QdhUKBomYifm
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)
prefix = '/content/drive/My Drive/'

import pandas as pd
import numpy as np

questions = pd.read_csv('/content/drive/My Drive/questions.csv', usecols=['question1', 'question2', 'is_duplicate']).values

paired_qs = [' '.join((str(i),str(j))) for i, j in zip(questions[:,0], questions[:,1])]
paired_qs = np.array(paired_qs)[:,np.newaxis]

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB

X_train1, X_test1, Y_train1, Y_test1 = train_test_split(paired_qs, questions[:,2], test_size = 0.2)
tfidf = TfidfVectorizer()   # The training and testing inputs to the sklearn classifier must all be of the same length, therefore a vectoriser is used to make their lengths equal
tfidf.fit(np.squeeze(paired_qs))
train_dat1_vec = tfidf.transform(np.squeeze(X_train1))   
test_dat1_vec = tfidf.transform(np.squeeze(X_test1))   # The train and test data are vectorised
mnb = MultinomialNB()
mnb.fit(train_dat1_vec, np.squeeze(Y_train1).astype(int))
print("\nThe accuracy of the NB classifier = " + str(100*mnb.score(test_dat1_vec, np.squeeze(Y_test1).astype(int))) + "%")

from sklearn.linear_model import LogisticRegression

lrc = LogisticRegression(max_iter = 1000)
lrc.fit(train_dat1_vec, np.squeeze(Y_train1).astype(int))
print("\nThe accuracy of the LR classifier = " + str(100*lrc.score(test_dat1_vec, np.squeeze(Y_test1).astype(int))) + "%")

lrc1 = LogisticRegression(max_iter = 1000)
lrc1.fit(train_dat2_vec, Y_train2)
print("\nThe accuracy of the NB classifier = " + str(100*lrc1.score(test_dat2_vec, Y_test2)) + "%")

from sklearn.svm import SVC

svmc = SVC()
svmc.fit(train_dat1_vec, np.squeeze(Y_train).astype(int))
print("\nThe accuracy of the SVM classifier = " + str(100*svmc.score(test_dat1_vec, np.squeeze(Y_test).astype(int))) + "%")

